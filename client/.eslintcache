[{"C:\\Users\\LENOVO\\Projects\\personal\\blogProject\\client\\src\\App.js":"1","C:\\Users\\LENOVO\\Projects\\personal\\blogProject\\client\\src\\actions\\types.js":"2","C:\\Users\\LENOVO\\Projects\\personal\\blogProject\\client\\src\\components\\PostsList.js":"3","C:\\Users\\LENOVO\\Projects\\personal\\blogProject\\client\\src\\components\\AddPostForm.js":"4","C:\\Users\\LENOVO\\Projects\\personal\\blogProject\\client\\src\\store.js":"5","C:\\Users\\LENOVO\\Projects\\personal\\blogProject\\client\\src\\reducers\\post.js":"6","C:\\Users\\LENOVO\\Projects\\personal\\blogProject\\client\\src\\api\\index.js":"7","C:\\Users\\LENOVO\\Projects\\personal\\blogProject\\client\\src\\actions\\post.js":"8"},{"size":2294,"mtime":1612049497560,"results":"9","hashOfConfig":"10"},{"size":86,"mtime":1612045115614,"results":"11","hashOfConfig":"10"},{"size":162,"mtime":1609887500761,"results":"12","hashOfConfig":"10"},{"size":4013,"mtime":1612048010587,"results":"13","hashOfConfig":"10"},{"size":354,"mtime":1612048731858,"results":"14","hashOfConfig":"10"},{"size":502,"mtime":1612045755703,"results":"15","hashOfConfig":"10"},{"size":234,"mtime":1612046903170,"results":"16","hashOfConfig":"10"},{"size":741,"mtime":1612049529077,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"osz32p",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\LENOVO\\Projects\\personal\\blogProject\\client\\src\\App.js",[],"C:\\Users\\LENOVO\\Projects\\personal\\blogProject\\client\\src\\actions\\types.js",[],"C:\\Users\\LENOVO\\Projects\\personal\\blogProject\\client\\src\\components\\PostsList.js",[],"C:\\Users\\LENOVO\\Projects\\personal\\blogProject\\client\\src\\components\\AddPostForm.js",["36"],"import React, {useState} from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport FileBase64 from \"react-file-base64\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {\r\n  Button,\r\n  Text,\r\n  TextField,\r\n  Select,\r\n  Input,\r\n  MenuItem,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n} from \"@material-ui/core\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport * as yup from \"yup\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { createPost} from \"../actions/post\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n  },\r\n  textField: {\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nconst tags = [\"fun\", \"programming\", \"health\", \"science\"];\r\n\r\nconst postSchema = yup.object().shape({\r\n  title: yup.string().required(),\r\n  subtitle: yup.string().required(),\r\n  content: yup.string().min(20).required(),\r\n  tag: yup.mixed().oneOf(tags),\r\n});\r\n\r\nconst AddPostForm = ({ open, handleClose }) => {\r\n  const dispatch = useDispatch();\r\n  const [file, setFile] = useState(null);\r\n\r\n  const { register, handleSubmit, control, errors, reset } = useForm({\r\n    resolver: yupResolver(postSchema),\r\n  });\r\n\r\n  const onSubmit = (data) => {\r\n    dispatch(createPost({...data, image: file}));\r\n    clearForm();\r\n  }\r\n\r\n  const clearForm = () => {\r\n    reset();\r\n    setFile(null);\r\n    handleClose();\r\n  }\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <Dialog open={open} onClose={handleClose}>\r\n      <DialogTitle>Add New Article</DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText>\r\n          Fill the form for adding new article\r\n        </DialogContentText>\r\n        <div className={classes.root}>\r\n          <form noValidate autoComplete=\"off\" onSubmit={handleSubmit(onSubmit)}>\r\n            <TextField\r\n              id=\"title\"\r\n              label=\"Title\"\r\n              name=\"title\"\r\n              variant=\"outlined\"\r\n              className={classes.textField}\r\n              size=\"small\"\r\n              inputRef={register}\r\n              error={errors.title ? true : false}\r\n              fullWidth\r\n            />\r\n            <TextField\r\n              id=\"subtitle\"\r\n              label=\"Subtitle\"\r\n              name=\"subtitle\"\r\n              variant=\"outlined\"\r\n              className={classes.textField}\r\n              size=\"small\"\r\n              inputRef={register}\r\n              error={errors.subtitle ? true : false}\r\n              fullWidth\r\n            />\r\n            <Controller\r\n              as={\r\n                <Select\r\n                  input={<Input />}\r\n                  className={classes.textField}\r\n                  fullWidth\r\n                >\r\n                  {tags.map((tag, index) => (\r\n                    <MenuItem key={index} value={tag}>\r\n                      {tag}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              }\r\n              name=\"tag\"\r\n              control={control}\r\n              error={errors.tag ? true : false}\r\n              defaultValue={tags[0]}\r\n            />\r\n            <TextField\r\n              id=\"content\"\r\n              label=\"Content\"\r\n              name=\"content\"\r\n              multiline\r\n              rows={4}\r\n              variant=\"outlined\"\r\n              className={classes.textField}\r\n              size=\"small\"\r\n              inputRef={register}\r\n              error={errors.content ? true : false}\r\n              fullWidth\r\n            />\r\n            <FileBase64\r\n              multiple={false}\r\n              onDone={({ base64 }) => setFile(base64)}\r\n            />\r\n          </form>\r\n        </div>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button color=\"inherit\" onClick={clearForm}>Cancel</Button>\r\n        <Button type=\"submit\" variant=\"outlined\" color=\"primary\" onClick={() => handleSubmit(onSubmit)()}>\r\n          Add\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default AddPostForm;\r\n",["37","38"],"C:\\Users\\LENOVO\\Projects\\personal\\blogProject\\client\\src\\store.js",[],"C:\\Users\\LENOVO\\Projects\\personal\\blogProject\\client\\src\\reducers\\post.js",[],"C:\\Users\\LENOVO\\Projects\\personal\\blogProject\\client\\src\\api\\index.js",[],"C:\\Users\\LENOVO\\Projects\\personal\\blogProject\\client\\src\\actions\\post.js",[],{"ruleId":"39","severity":1,"message":"40","line":7,"column":3,"nodeType":"41","messageId":"42","endLine":7,"endColumn":7},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},"no-unused-vars","'Text' is defined but never used.","Identifier","unusedVar","no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-global-assign","no-unsafe-negation"]